{"uid":"fdb390f5d01d91e9","name":"[BUG] User resets app state","fullName":"features/burger_menu.feature:[BUG] User resets app state","historyId":"468cc814dade9d0c89f705bf8a026dd2","time":{"start":1736770724692,"stop":1736770730349,"duration":5657},"status":"failed","statusMessage":"AssertionError: Product 'Sauce Labs Backpack' button [Add to Cart] is missing\nassert False\n +  where False = add_to_cart_button_is_visible(<JSHandle preview=JSHandle@<div class=\"inventory_item\" data-test=\"inventory-item\">…</div>>)\n +    where add_to_cart_button_is_visible = <ui_automation_suite.bdd_tests.page_objects.products_page.ProductPage object at 0x7f3a0f647150>.add_to_cart_button_is_visible","statusTrace":"fixturefunc = <function products_are_displayed at 0x7f3a11405440>\nrequest = <FixtureRequest for <Function test_bug_user_resets_app_state>>\nkwargs = {'page': <Page url='https://www.saucedemo.com/inventory.html'>, 'product_page': <ui_automation_suite.bdd_tests.page_objects.products_page.ProductPage object at 0x7f3a0f647150>}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/ui-automation-suite-sxdfqp51-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npage = <Page url='https://www.saucedemo.com/inventory.html'>\nproduct_page = <ui_automation_suite.bdd_tests.page_objects.products_page.ProductPage object at 0x7f3a0f647150>\n\n    @then(parsers.cfparse(\"all products are fully visible with all attributes\"))\n    def products_are_displayed(page, product_page: ProductPage):\n        products_displayed = product_page.get_all_products()\n        assert len(products_displayed) > 0, \"No products were displayed\"\n        logging.info(\n            f\"Validation started: {len(products_displayed)} product(s) found on the page.\"\n        )\n    \n        for product in products_displayed:\n            assert product_page.name_is_visible(product), \"Product name is missing\"\n            product_name = product_page.get_product_name(product)\n            assert product_page.image_is_visible(\n                product\n            ), f\"Product {product_name} image is missing\"\n            assert product_page.description_is_visible(\n                product\n            ), f\"Product {product_name}  description is missing\"\n            assert product_page.price_is_visible(\n                product\n            ), f\"Product {product_name}  price is missing\"\n>           assert product_page.add_to_cart_button_is_visible(\n                product\n            ), f\"Product '{product_name}' button [Add to Cart] is missing\"\nE           AssertionError: Product 'Sauce Labs Backpack' button [Add to Cart] is missing\nE           assert False\nE            +  where False = add_to_cart_button_is_visible(<JSHandle preview=JSHandle@<div class=\"inventory_item\" data-test=\"inventory-item\">…</div>>)\nE            +    where add_to_cart_button_is_visible = <ui_automation_suite.bdd_tests.page_objects.products_page.ProductPage object at 0x7f3a0f647150>.add_to_cart_button_is_visible\n\nui_automation_suite/bdd_tests/step_defs/common_steps.py:102: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: Product 'Sauce Labs Backpack' button [Add to Cart] is missing\nassert False\n +  where False = add_to_cart_button_is_visible(<JSHandle preview=JSHandle@<div class=\"inventory_item\" data-test=\"inventory-item\">…</div>>)\n +    where add_to_cart_button_is_visible = <ui_automation_suite.bdd_tests.page_objects.products_page.ProductPage object at 0x7f3a0f647150>.add_to_cart_button_is_visible","statusTrace":"fixturefunc = <function products_are_displayed at 0x7f3a11405440>\nrequest = <FixtureRequest for <Function test_bug_user_resets_app_state>>\nkwargs = {'page': <Page url='https://www.saucedemo.com/inventory.html'>, 'product_page': <ui_automation_suite.bdd_tests.page_objects.products_page.ProductPage object at 0x7f3a0f647150>}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/ui-automation-suite-sxdfqp51-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npage = <Page url='https://www.saucedemo.com/inventory.html'>\nproduct_page = <ui_automation_suite.bdd_tests.page_objects.products_page.ProductPage object at 0x7f3a0f647150>\n\n    @then(parsers.cfparse(\"all products are fully visible with all attributes\"))\n    def products_are_displayed(page, product_page: ProductPage):\n        products_displayed = product_page.get_all_products()\n        assert len(products_displayed) > 0, \"No products were displayed\"\n        logging.info(\n            f\"Validation started: {len(products_displayed)} product(s) found on the page.\"\n        )\n    \n        for product in products_displayed:\n            assert product_page.name_is_visible(product), \"Product name is missing\"\n            product_name = product_page.get_product_name(product)\n            assert product_page.image_is_visible(\n                product\n            ), f\"Product {product_name} image is missing\"\n            assert product_page.description_is_visible(\n                product\n            ), f\"Product {product_name}  description is missing\"\n            assert product_page.price_is_visible(\n                product\n            ), f\"Product {product_name}  price is missing\"\n>           assert product_page.add_to_cart_button_is_visible(\n                product\n            ), f\"Product '{product_name}' button [Add to Cart] is missing\"\nE           AssertionError: Product 'Sauce Labs Backpack' button [Add to Cart] is missing\nE           assert False\nE            +  where False = add_to_cart_button_is_visible(<JSHandle preview=JSHandle@<div class=\"inventory_item\" data-test=\"inventory-item\">…</div>>)\nE            +    where add_to_cart_button_is_visible = <ui_automation_suite.bdd_tests.page_objects.products_page.ProductPage object at 0x7f3a0f647150>.add_to_cart_button_is_visible\n\nui_automation_suite/bdd_tests/step_defs/common_steps.py:102: AssertionError","steps":[{"name":"Given the login page is displayed","time":{"start":1736770724692,"stop":1736770725984,"duration":1292},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"When user tries to login with standard_user","time":{"start":1736770725984,"stop":1736770728086,"duration":2102},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Then user is redirected to the products page","time":{"start":1736770728086,"stop":1736770728087,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Then burger menu button is visible and menu is closed","time":{"start":1736770728087,"stop":1736770728100,"duration":13},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"When user adds product Backpack to the cart","time":{"start":1736770728100,"stop":1736770728862,"duration":762},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Then the cart icon displays 1 product(s)","time":{"start":1736770728862,"stop":1736770728875,"duration":13},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"When user opens the burger menu","time":{"start":1736770728875,"stop":1736770729569,"duration":694},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"And user selects from menu Reset App State","time":{"start":1736770729569,"stop":1736770730261,"duration":692},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Then the cart icon displays 0 product(s)","time":{"start":1736770730261,"stop":1736770730267,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"And all products are fully visible with all attributes","time":{"start":1736770730267,"stop":1736770730349,"duration":82},"status":"failed","statusMessage":"Product 'Sauce Labs Backpack' button [Add to Cart] is missing\nassert False\n +  where False = add_to_cart_button_is_visible(<JSHandle preview=JSHandle@<div class=\"inventory_item\" data-test=\"inventory-item\">…</div>>)\n +    where add_to_cart_button_is_visible = <ui_automation_suite.bdd_tests.page_objects.products_page.ProductPage object at 0x7f3a0f647150>.add_to_cart_button_is_visible","statusTrace":"AssertionError: Product 'Sauce Labs Backpack' button [Add to Cart] is missing\nassert False\n +  where False = add_to_cart_button_is_visible(<JSHandle preview=JSHandle@<div class=\"inventory_item\" data-test=\"inventory-item\">…</div>>)\n +    where add_to_cart_button_is_visible = <ui_automation_suite.bdd_tests.page_objects.products_page.ProductPage object at 0x7f3a0f647150>.add_to_cart_button_is_visible\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[{"uid":"9753b1c72bbb25cd","name":"Step failure!","source":"9753b1c72bbb25cd.txt","type":"text/plain","size":111},{"uid":"90252158f93820ee","name":"trace_test_bug_user_resets_app_state.zip","source":"90252158f93820ee.zip","type":"application/zip","size":1023063},{"uid":"6d3be1535d99b449","name":"log","source":"6d3be1535d99b449.txt","type":"text/plain","size":802}],"parameters":[],"stepsCount":10,"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az810-368"},{"name":"thread","value":"6437-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Burgermenu navigation"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"fdb390f5d01d91e9.json","parameterValues":[]}