{"uid":"90446f689ce68a45","name":"[BUG] User is able to remove product from the cart","fullName":"features/products.feature:[BUG] User is able to remove product from the cart","historyId":"d0163a74c441ce00c297fdec0710c9ad","time":{"start":1736770671082,"stop":1736770676402,"duration":5320},"status":"failed","statusMessage":"AssertionError: Bike Light wasn't removed from the cart as [Add to Cart] button isn't visible\nassert False\n +  where False = add_to_cart_button_is_visible(<JSHandle preview=JSHandle@<div class=\"inventory_item\" data-test=\"inventory-item\">…</div>>)\n +    where add_to_cart_button_is_visible = <ui_automation_suite.bdd_tests.page_objects.products_page.ProductPage object at 0x7f3a0f9e5bd0>.add_to_cart_button_is_visible","statusTrace":"fixturefunc = <function removed_product_from_cart at 0x7f3a10e75b20>\nrequest = <FixtureRequest for <Function test_bug_user_is_able_to_remove_product_from_the_cart>>\nkwargs = {'product_name': 'Bike Light', 'product_page': <ui_automation_suite.bdd_tests.page_objects.products_page.ProductPage object at 0x7f3a0f9e5bd0>}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/ui-automation-suite-sxdfqp51-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nproduct_name = 'Bike Light'\nproduct_page = <ui_automation_suite.bdd_tests.page_objects.products_page.ProductPage object at 0x7f3a0f9e5bd0>\n\n    @when(\n        parsers.cfparse(\n            \"user removes product {product_name} from the cart on the product list\"\n        )\n    )\n    def removed_product_from_cart(product_name, product_page: ProductPage):\n        assert product_name in AVAILABLE_PRODUCTS, INVALID_PRODUCT\n        all_products = product_page.get_all_products()\n        assert all_products, \"No products were displayed\"\n        product = product_page.get_specific_product(product_name, all_products)\n        product_page.remove_product_from_the_cart(product)\n        # Validate product is removed from the cart\n>       assert product_page.add_to_cart_button_is_visible(product), (\n            f\"{product_name} wasn't removed from the cart as \"\n            f\"[Add to Cart] button isn't visible\"\n        )\nE       AssertionError: Bike Light wasn't removed from the cart as [Add to Cart] button isn't visible\nE       assert False\nE        +  where False = add_to_cart_button_is_visible(<JSHandle preview=JSHandle@<div class=\"inventory_item\" data-test=\"inventory-item\">…</div>>)\nE        +    where add_to_cart_button_is_visible = <ui_automation_suite.bdd_tests.page_objects.products_page.ProductPage object at 0x7f3a0f9e5bd0>.add_to_cart_button_is_visible\n\nui_automation_suite/bdd_tests/step_defs/test_products.py:68: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: Bike Light wasn't removed from the cart as [Add to Cart] button isn't visible\nassert False\n +  where False = add_to_cart_button_is_visible(<JSHandle preview=JSHandle@<div class=\"inventory_item\" data-test=\"inventory-item\">…</div>>)\n +    where add_to_cart_button_is_visible = <ui_automation_suite.bdd_tests.page_objects.products_page.ProductPage object at 0x7f3a0f9e5bd0>.add_to_cart_button_is_visible","statusTrace":"fixturefunc = <function removed_product_from_cart at 0x7f3a10e75b20>\nrequest = <FixtureRequest for <Function test_bug_user_is_able_to_remove_product_from_the_cart>>\nkwargs = {'product_name': 'Bike Light', 'product_page': <ui_automation_suite.bdd_tests.page_objects.products_page.ProductPage object at 0x7f3a0f9e5bd0>}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/ui-automation-suite-sxdfqp51-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nproduct_name = 'Bike Light'\nproduct_page = <ui_automation_suite.bdd_tests.page_objects.products_page.ProductPage object at 0x7f3a0f9e5bd0>\n\n    @when(\n        parsers.cfparse(\n            \"user removes product {product_name} from the cart on the product list\"\n        )\n    )\n    def removed_product_from_cart(product_name, product_page: ProductPage):\n        assert product_name in AVAILABLE_PRODUCTS, INVALID_PRODUCT\n        all_products = product_page.get_all_products()\n        assert all_products, \"No products were displayed\"\n        product = product_page.get_specific_product(product_name, all_products)\n        product_page.remove_product_from_the_cart(product)\n        # Validate product is removed from the cart\n>       assert product_page.add_to_cart_button_is_visible(product), (\n            f\"{product_name} wasn't removed from the cart as \"\n            f\"[Add to Cart] button isn't visible\"\n        )\nE       AssertionError: Bike Light wasn't removed from the cart as [Add to Cart] button isn't visible\nE       assert False\nE        +  where False = add_to_cart_button_is_visible(<JSHandle preview=JSHandle@<div class=\"inventory_item\" data-test=\"inventory-item\">…</div>>)\nE        +    where add_to_cart_button_is_visible = <ui_automation_suite.bdd_tests.page_objects.products_page.ProductPage object at 0x7f3a0f9e5bd0>.add_to_cart_button_is_visible\n\nui_automation_suite/bdd_tests/step_defs/test_products.py:68: AssertionError","steps":[{"name":"Given the login page is displayed","time":{"start":1736770671082,"stop":1736770672353,"duration":1271},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"When user tries to login with problem_user","time":{"start":1736770672353,"stop":1736770674445,"duration":2092},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Then user is redirected to the products page","time":{"start":1736770674445,"stop":1736770674445,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"And all products are fully visible with all attributes","time":{"start":1736770674445,"stop":1736770674908,"duration":463},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"When user adds product Bike Light to the cart","time":{"start":1736770674908,"stop":1736770675660,"duration":752},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"And user removes product Bike Light from the cart on the product list","time":{"start":1736770675661,"stop":1736770676402,"duration":741},"status":"failed","statusMessage":"Bike Light wasn't removed from the cart as [Add to Cart] button isn't visible\nassert False\n +  where False = add_to_cart_button_is_visible(<JSHandle preview=JSHandle@<div class=\"inventory_item\" data-test=\"inventory-item\">…</div>>)\n +    where add_to_cart_button_is_visible = <ui_automation_suite.bdd_tests.page_objects.products_page.ProductPage object at 0x7f3a0f9e5bd0>.add_to_cart_button_is_visible","statusTrace":"AssertionError: Bike Light wasn't removed from the cart as [Add to Cart] button isn't visible\nassert False\n +  where False = add_to_cart_button_is_visible(<JSHandle preview=JSHandle@<div class=\"inventory_item\" data-test=\"inventory-item\">…</div>>)\n +    where add_to_cart_button_is_visible = <ui_automation_suite.bdd_tests.page_objects.products_page.ProductPage object at 0x7f3a0f9e5bd0>.add_to_cart_button_is_visible\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[{"uid":"452df4058a1793e","name":"Step failure!","source":"452df4058a1793e.txt","type":"text/plain","size":111},{"uid":"b887ba1630f42b17","name":"trace_test_bug_user_is_able_to_remove_product_from_the_cart.zip","source":"b887ba1630f42b17.zip","type":"application/zip","size":357647},{"uid":"2093d2a587a43008","name":"log","source":"2093d2a587a43008.txt","type":"text/plain","size":472}],"parameters":[],"stepsCount":6,"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az810-368"},{"name":"thread","value":"6437-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Products page"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"90446f689ce68a45.json","parameterValues":[]}