{"uid":"e4da1af5f988a386","name":"[BUG] Verify the initial state of an empty shopping cart","fullName":"features/shopping_cart.feature:[BUG] Verify the initial state of an empty shopping cart","historyId":"26d190e052dc1861f98e32091e2f02e6","time":{"start":1736770680664,"stop":1736770684746,"duration":4082},"status":"failed","statusMessage":"AssertionError: Checkout button is displayed when it should not be\nassert not True\n +  where True = cart_checkout_is_displayed()\n +    where cart_checkout_is_displayed = <ui_automation_suite.bdd_tests.page_objects.shopping_cart_page.ShoppingCartPage object at 0x7f3a0f8bb690>.cart_checkout_is_displayed","statusTrace":"fixturefunc = <function checkout_possibility at 0x7f3a10e75e40>\nrequest = <FixtureRequest for <Function test_bug_verify_the_initial_state_of_an_empty_shopping_cart>>\nkwargs = {'rule': \"can't\", 'shopping_cart_page': <ui_automation_suite.bdd_tests.page_objects.shopping_cart_page.ShoppingCartPage object at 0x7f3a0f8bb690>}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/ui-automation-suite-sxdfqp51-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrule = \"can't\"\nshopping_cart_page = <ui_automation_suite.bdd_tests.page_objects.shopping_cart_page.ShoppingCartPage object at 0x7f3a0f8bb690>\n\n    @then(parsers.cfparse(\"user {rule} proceed to first checkout step\"))\n    def checkout_possibility(rule, shopping_cart_page: ShoppingCartPage):\n        if rule == \"can\":\n            assert (\n                shopping_cart_page.cart_checkout_is_displayed()\n            ), \"Checkout button is not displayed when it should be\"\n        else:\n>           assert (\n                not shopping_cart_page.cart_checkout_is_displayed()\n            ), \"Checkout button is displayed when it should not be\"\nE           AssertionError: Checkout button is displayed when it should not be\nE           assert not True\nE            +  where True = cart_checkout_is_displayed()\nE            +    where cart_checkout_is_displayed = <ui_automation_suite.bdd_tests.page_objects.shopping_cart_page.ShoppingCartPage object at 0x7f3a0f8bb690>.cart_checkout_is_displayed\n\nui_automation_suite/bdd_tests/step_defs/test_shopping_cart.py:20: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: Checkout button is displayed when it should not be\nassert not True\n +  where True = cart_checkout_is_displayed()\n +    where cart_checkout_is_displayed = <ui_automation_suite.bdd_tests.page_objects.shopping_cart_page.ShoppingCartPage object at 0x7f3a0f8bb690>.cart_checkout_is_displayed","statusTrace":"fixturefunc = <function checkout_possibility at 0x7f3a10e75e40>\nrequest = <FixtureRequest for <Function test_bug_verify_the_initial_state_of_an_empty_shopping_cart>>\nkwargs = {'rule': \"can't\", 'shopping_cart_page': <ui_automation_suite.bdd_tests.page_objects.shopping_cart_page.ShoppingCartPage object at 0x7f3a0f8bb690>}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/ui-automation-suite-sxdfqp51-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrule = \"can't\"\nshopping_cart_page = <ui_automation_suite.bdd_tests.page_objects.shopping_cart_page.ShoppingCartPage object at 0x7f3a0f8bb690>\n\n    @then(parsers.cfparse(\"user {rule} proceed to first checkout step\"))\n    def checkout_possibility(rule, shopping_cart_page: ShoppingCartPage):\n        if rule == \"can\":\n            assert (\n                shopping_cart_page.cart_checkout_is_displayed()\n            ), \"Checkout button is not displayed when it should be\"\n        else:\n>           assert (\n                not shopping_cart_page.cart_checkout_is_displayed()\n            ), \"Checkout button is displayed when it should not be\"\nE           AssertionError: Checkout button is displayed when it should not be\nE           assert not True\nE            +  where True = cart_checkout_is_displayed()\nE            +    where cart_checkout_is_displayed = <ui_automation_suite.bdd_tests.page_objects.shopping_cart_page.ShoppingCartPage object at 0x7f3a0f8bb690>.cart_checkout_is_displayed\n\nui_automation_suite/bdd_tests/step_defs/test_shopping_cart.py:20: AssertionError","steps":[{"name":"Given the login page is displayed","time":{"start":1736770680665,"stop":1736770681932,"duration":1267},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"When user tries to login with standard_user","time":{"start":1736770681933,"stop":1736770684014,"duration":2081},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Then user is redirected to the products page","time":{"start":1736770684014,"stop":1736770684014,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"When user navigates to the shopping cart","time":{"start":1736770684014,"stop":1736770684723,"duration":709},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Then the cart icon displays 0 product(s)","time":{"start":1736770684723,"stop":1736770684729,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Then the shopping cart contains 0 product(s)","time":{"start":1736770684729,"stop":1736770684734,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"And user can continue shopping","time":{"start":1736770684734,"stop":1736770684739,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"And user can't proceed to first checkout step","time":{"start":1736770684740,"stop":1736770684746,"duration":6},"status":"failed","statusMessage":"Checkout button is displayed when it should not be\nassert not True\n +  where True = cart_checkout_is_displayed()\n +    where cart_checkout_is_displayed = <ui_automation_suite.bdd_tests.page_objects.shopping_cart_page.ShoppingCartPage object at 0x7f3a0f8bb690>.cart_checkout_is_displayed","statusTrace":"AssertionError: Checkout button is displayed when it should not be\nassert not True\n +  where True = cart_checkout_is_displayed()\n +    where cart_checkout_is_displayed = <ui_automation_suite.bdd_tests.page_objects.shopping_cart_page.ShoppingCartPage object at 0x7f3a0f8bb690>.cart_checkout_is_displayed\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[{"uid":"a60eeb8d8d4499f0","name":"Step failure!","source":"a60eeb8d8d4499f0.txt","type":"text/plain","size":111},{"uid":"bafa08c9b5d4d813","name":"trace_test_bug_verify_the_initial_state_of_an_empty_shopping_cart.zip","source":"bafa08c9b5d4d813.zip","type":"application/zip","size":381315},{"uid":"86898e160f1e538b","name":"log","source":"86898e160f1e538b.txt","type":"text/plain","size":529}],"parameters":[],"stepsCount":8,"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az810-368"},{"name":"thread","value":"6437-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Shopping cart"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"e4da1af5f988a386.json","parameterValues":[]}